name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on Python 3.12
    runs-on: ubuntu-latest
    needs: [security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with pytest
      run: |
        python -m pytest -v --tb=short

    - name: Run type checking with mypy
      run: |
        python -m mypy lighthouse/ --ignore-missing-imports

    - name: Build wheel
      run: |
        python -m pip install build
        python -m build --wheel

    - name: Upload wheel artifact
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-wheel
        path: dist/*.whl
        retention-days: 30

  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install ruff pylint radon

    - name: Run Ruff linter
      run: |
        ruff check lighthouse/ tests/

    - name: Run Pylint
      run: |
        pylint lighthouse/ --disable=C0114,C0115,C0116,R0903,W0511,W0613,W0718,W0212 --max-line-length=100 --fail-under=9.0

    - name: Check code complexity with Radon
      run: |
        radon cc lighthouse/ -a -nb
        radon mi lighthouse/ -nb

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit pip-audit

    - name: Run Bandit security scanner
      run: |
        bandit -r lighthouse/ --severity-level medium

    - name: Check dependencies for vulnerabilities with pip-audit
      run: |
        pip install -e .
        # Build ignore flags from .pip-audit-ignores.txt if any exist
        IGNORE_FLAGS=$(grep -v '^#' .pip-audit-ignores.txt | grep -v '^$' | sed 's/^/--ignore-vuln /' | tr '\n' ' ' || true)
        if [ -n "$IGNORE_FLAGS" ]; then
          pip-audit --skip-editable $IGNORE_FLAGS
        else
          pip-audit --skip-editable
        fi
